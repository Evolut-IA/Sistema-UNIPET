#### 1. **Objetivo Geral**
Criar um sistema de páginas white-label (templates personalizados e isolados) exclusivas para unidades credenciadas. Cada unidade, ao ser cadastrada na página `/rede`, terá uma página dedicada para gerenciar suas operações, como guias de atendimento, sem acesso a outras partes do site. Isso garante isolamento de dados, privacidade e foco na unidade específica. As credenciais de acesso (login e senha) serão gerenciadas separadamente na página `/administracao`, em uma seção dedicada.

#### 2. **Fluxo de Cadastro e Geração de Páginas**
- **Página de Cadastro de Unidades (`/rede`)**:
  - Permitir o cadastro de novas unidades credenciadas.
  - Incluir campos para edição completa de informações da unidade, como: nome, endereço, contato, descrição, e outros dados relevantes. **Não incluir campos de login e senha aqui**; esses serão gerenciados na página `/administracao`.
  - Ao cadastrar ou editar uma unidade, gerar automaticamente uma URL personalizada baseada no nome da unidade (exemplo: para "ANIMAL'S PETS", a URL será `/animalspets`).
    - **Regras para Geração de URL**: Converter o nome para minúsculas, remover acentos, espaços e caracteres especiais (usar slugification, como em bibliotecas como `slugify` em Python ou equivalente). Garantir unicidade; se houver conflito, adicionar um sufixo numérico (ex: `/animalspets-2`).
  - Integrar com a tabela existente no banco de dados que gerencia as rows de unidades (assumindo uma tabela como `unidades_credenciadas` com colunas como `id`, `nome`, `url_slug`, etc.). As colunas para `login` e `senha_hash` serão atualizadas separadamente via `/administracao`.
    - Ao salvar, inserir ou atualizar os dados na tabela, incluindo o slug da URL.

- **Página de Administração Geral (`/administracao`)**:
  - Adicionar uma nova div chamada **'Rede Credenciada'** logo abaixo da div existente **'Usuários (0)'**.
  - Nessa div 'Rede Credenciada', listar todas as unidades credenciadas cadastradas (ex: em uma tabela ou lista), com opções para:
    - Criar ou editar credenciais de acesso para cada unidade: login (ex: e-mail ou username único) e senha (com hashing seguro, como bcrypt).
    - Visualizar ou atualizar outras configurações relacionadas às credenciais, mas sem editar os dados principais da unidade (esses ficam em `/rede`).
  - Garantir que as credenciais sejam únicas no sistema e associadas ao ID da unidade no banco de dados.
    - Exemplos de Atualização: Ao definir login/senha, atualizar a tabela com `UPDATE unidades SET login = ?, senha_hash = ? WHERE id = ?;`.

- **Geração Automática da Página White-Label**:
  - Após o cadastro em `/rede` e configuração de credenciais em `/administracao`, criar uma rota dinâmica no backend (ex: usando frameworks como Express.js, Django ou Laravel) que responda à URL gerada (ex: `/animalspets`).
  - Essa página deve ser um template isolado, renderizando apenas informações da unidade específica, recuperadas do banco de dados via ID ou slug.
  - Conteúdo principal da página:
    - Lista de guias de atendimento recebidas para essa unidade, com opções para aceitar ou recusar (atualizando status no banco de dados).
    - Outras informações importantes: histórico de atendimentos, relatórios personalizados, configurações da unidade (ex: horários de funcionamento, serviços oferecidos).
    - Interface simples e focada: use dashboards com tabelas, botões de ação e filtros para guias (ex: pendentes, aceitas, recusadas).

#### 3. **Segurança e Isolamento**
- **Autenticação Obrigatória**:
  - Acesso à página white-label **somente via login e senha** configurados na div 'Rede Credenciada' de `/administracao`.
  - Implementar autenticação segura (ex: JWT ou sessions com middleware de autenticação).
  - Redirecionar para uma página de login personalizada se não autenticado.
- **Isolamento de Dados e Acesso**:
  - A página deve exibir **exclusivamente dados da unidade logada**, filtrando consultas no banco de dados pelo ID da unidade (ex: `WHERE unidade_id = :id` em SQL).
  - **Proibir Acesso a Outras Áreas**: Usar guards ou middlewares para bloquear rotas não autorizadas. A unidade não deve ver ou acessar dados de outras unidades, administradores ou partes globais do site.
  - Auditoria: Registrar logs de acesso e ações (aceitar/recusar guias) para rastreabilidade.
  - Validações: Senhas devem ser fortes (mínimo 8 caracteres, com requisitos), e logins únicos no sistema.

#### 4. **Integração com Banco de Dados**
- Utilizar a tabela existente para unidades (ex: `unidades`).
- Adicionar colunas se necessário: `url_slug` (string, unique), `login` (string, unique), `senha_hash` (string).
- Exemplos de Queries (em SQL genérico):
  - Cadastro (em `/rede`): `INSERT INTO unidades (nome, url_slug, ...) VALUES (?, ?, ...);`
  - Atualização de Credenciais (em `/administracao`): `UPDATE unidades SET login = ?, senha_hash = ? WHERE id = ?;`
  - Recuperação: `SELECT * FROM unidades WHERE url_slug = ? AND id = ?;` (para isolamento).
  - Atualização de Guias: `UPDATE guias SET status = 'aceito' WHERE unidade_id = ? AND guia_id = ?;`

#### 5. **Considerações Adicionais para Implementação**
- **Usabilidade**: 
  - Na div 'Rede Credenciada' de `/administracao`, use uma tabela interativa com colunas como "Nome da Unidade", "Login", "Ações" (editar senha, resetar, etc.).
  - Na página white-label, inclua um menu simples (ex: "Guias Pendentes", "Histórico", "Configurações").
  - Suporte a notificações (ex: e-mail ou in-app) para novas guias.
- **Escalabilidade**: 
  - Para muitas unidades, use rotas dinâmicas e caching para performance.
  - Teste com múltiplas unidades para garantir isolamento.
- **Frontend/Backend**: 
  - Frontend: Use React/Vue para dashboards interativos e seções dinâmicas.
  - Backend: API REST para gerenciar dados, com endpoints protegidos (ex: um endpoint específico para atualizar credenciais).
- **Testes e Edge Cases**:
  - Testar nomes com caracteres especiais (ex: acentos, apóstrofos).
  - Caso de edição: Atualizar URL se nome mudar, mas redirecionar da antiga para evitar quebras.
  - Erros: Tratamento para login inválido, unidade não encontrada, ou tentativas de acesso sem credenciais configuradas.

Essa correção separa claramente a gestão de credenciais da edição de unidades, melhorando a segurança e a organização administrativa. Se precisar de mais ajustes, como wireframes ou exemplos de código, avise!